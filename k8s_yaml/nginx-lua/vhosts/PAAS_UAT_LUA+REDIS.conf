    server {
        listen 80;
        server_name *.test.qjclouds.com;
        index index.html index.htm index.php;
        location = /redis {
            internal;
            set_unescape_uri $key $arg_key;
            redis2_query get $key;
            redis2_pass 10.68.0.122:22121;
        }

        location / {
            set $target '';            
            
            access_by_lua '
        local parameters = split_path(ngx.var.uri)
        local action = parameters[1]
        local action1 = parameters[2]
        local action2 = ngx.var.host
        if ngx.var.uri == "/" then
               res = ngx.location.capture(
                "/redis", { args = { key = "0_"..action2 } }
                )
              local parser = require "redis.parser"
              local dapeng, typ = parser.parse_reply(res.body)
           return ngx.redirect(dapeng)
        end
        if(#parameters == 0) then
                 ngx_log(ngx.ERR, "----------------------->")
                 ngx.exit(ngx.ERROR)
                   ngx.exit(ngx.HTTP_FORBIDDEN)
        end
        if action1 == nil then 
		 res = ngx.location.capture(
                    "/redis", { args = { key = "0_/paas/res" } }
                )
	 
	else 
        	 res = ngx.location.capture(
                    "/redis", { args = { key = "0_/"..action.."/"..action1 } }
        	)
        end
        if res.status ~= 200 then
                    ngx.exit(res.status)
        end

        if not res.body then
               res = ngx.location.capture(
                "/redis", { args = { key = "0_paas/res" } }
                )
        end

        local parser = require "redis.parser"
        local server, typ = parser.parse_reply(res.body)
        if typ ~= parser.BULK_REPLY or not server then
                    return ngx.redirect("/paas/res")
        end

        if server == "" then
                    server = "*.test.qjclouds.com"
        end
        ngx.var.target = server
       ';
       resolver 8.8.8.8;               
       proxy_pass http://$target;
      proxy_set_header Host $host;
      proxy_set_header  X-Real-IP        $remote_addr;  
     proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for; 
     }
	#access_log /tmp/access.log;
	#error_log /tmp/access.log;

    }
